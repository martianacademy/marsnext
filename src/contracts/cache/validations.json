{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "4417e775f5400e871b02e512feb6fef996bcc2a35810989fbe37e918a3422d3a",
          "withoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739",
          "linkedWithoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/MarsNextProtocol.sol:MarsNextProtocol": {
        "src": "contracts/MarsNextProtocol.sol:7",
        "version": {
          "withMetadata": "7e6b32216d1118600192ca59ea04d3b6a51ba4800e5cd699cffd2c5e1b074686",
          "withoutMetadata": "0ec87551cee96d334d98c6857bab92288020aafe6ed277541ff7c70b9a6a16e9",
          "linkedWithoutMetadata": "0ec87551cee96d334d98c6857bab92288020aafe6ed277541ff7c70b9a6a16e9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MarsNextProtocol",
            "src": "contracts/MarsNextProtocol.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "4417e775f5400e871b02e512feb6fef996bcc2a35810989fbe37e918a3422d3a",
          "withoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739",
          "linkedWithoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/MarsNextProtocol.sol:MarsNextProtocol": {
        "src": "contracts/MarsNextProtocol.sol:7",
        "version": {
          "withMetadata": "7e6b32216d1118600192ca59ea04d3b6a51ba4800e5cd699cffd2c5e1b074686",
          "withoutMetadata": "0ec87551cee96d334d98c6857bab92288020aafe6ed277541ff7c70b9a6a16e9",
          "linkedWithoutMetadata": "0ec87551cee96d334d98c6857bab92288020aafe6ed277541ff7c70b9a6a16e9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MarsNextProtocol",
            "src": "contracts/MarsNextProtocol.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "4417e775f5400e871b02e512feb6fef996bcc2a35810989fbe37e918a3422d3a",
          "withoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739",
          "linkedWithoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/MarsNextProtocol.sol:MarsNextProtocol": {
        "src": "contracts/MarsNextProtocol.sol:7",
        "version": {
          "withMetadata": "7e6b32216d1118600192ca59ea04d3b6a51ba4800e5cd699cffd2c5e1b074686",
          "withoutMetadata": "0ec87551cee96d334d98c6857bab92288020aafe6ed277541ff7c70b9a6a16e9",
          "linkedWithoutMetadata": "0ec87551cee96d334d98c6857bab92288020aafe6ed277541ff7c70b9a6a16e9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MarsNextProtocol",
            "src": "contracts/MarsNextProtocol.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "4417e775f5400e871b02e512feb6fef996bcc2a35810989fbe37e918a3422d3a",
          "withoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739",
          "linkedWithoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/MarsNextProtocol.sol:MarsNextProtocol": {
        "src": "contracts/MarsNextProtocol.sol:7",
        "version": {
          "withMetadata": "7e6b32216d1118600192ca59ea04d3b6a51ba4800e5cd699cffd2c5e1b074686",
          "withoutMetadata": "0ec87551cee96d334d98c6857bab92288020aafe6ed277541ff7c70b9a6a16e9",
          "linkedWithoutMetadata": "0ec87551cee96d334d98c6857bab92288020aafe6ed277541ff7c70b9a6a16e9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MarsNextProtocol",
            "src": "contracts/MarsNextProtocol.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/ERC20TokenDeployerWithCreate2.sol:ERC20TokenDeployerWithCreate2": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:15",
        "version": {
          "withMetadata": "979ccc90760e817f36b6d180510f99a033a9c2701bca8f2b1f0f4a5a7cd2aa70",
          "withoutMetadata": "d0a6510d63bf08f1c2aaeaab07859ca4f4c38a20bd82b231f264a0279f09fc0f",
          "linkedWithoutMetadata": "d0a6510d63bf08f1c2aaeaab07859ca4f4c38a20bd82b231f264a0279f09fc0f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddress(bytes,uint256)",
          "deploy(bytes,uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ERC20TokenDeployerWithCreate2.sol:IERC20": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/ERC20TokenDeployerWithCreate2.sol:ERC20TokenDeployerWithCreate2": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:15",
        "version": {
          "withMetadata": "979ccc90760e817f36b6d180510f99a033a9c2701bca8f2b1f0f4a5a7cd2aa70",
          "withoutMetadata": "d0a6510d63bf08f1c2aaeaab07859ca4f4c38a20bd82b231f264a0279f09fc0f",
          "linkedWithoutMetadata": "d0a6510d63bf08f1c2aaeaab07859ca4f4c38a20bd82b231f264a0279f09fc0f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddress(bytes,uint256)",
          "deploy(bytes,uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ERC20TokenDeployerWithCreate2.sol:IERC20": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/ERC20TokenDeployerWithCreate2.sol:ERC20TokenDeployerWithCreate2": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:12",
        "version": {
          "withMetadata": "b6f8ab522ab65d4e6f8d5ef25eed42b42d44a87e2163e1816d2be1c131c7e9aa",
          "withoutMetadata": "d378ae387f8ef94eab2f91d595184c11b33560da957980a40a8ac613cdbdef47",
          "linkedWithoutMetadata": "d378ae387f8ef94eab2f91d595184c11b33560da957980a40a8ac613cdbdef47"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddress(bytes,uint256)",
          "deploy(bytes,uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ERC20TokenDeployerWithCreate2.sol:IERC20": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "4417e775f5400e871b02e512feb6fef996bcc2a35810989fbe37e918a3422d3a",
          "withoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739",
          "linkedWithoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ERC20TokenDeployerWithCreate2.sol:ERC20TokenDeployerWithCreate2": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:12",
        "version": {
          "withMetadata": "b6f8ab522ab65d4e6f8d5ef25eed42b42d44a87e2163e1816d2be1c131c7e9aa",
          "withoutMetadata": "d378ae387f8ef94eab2f91d595184c11b33560da957980a40a8ac613cdbdef47",
          "linkedWithoutMetadata": "d378ae387f8ef94eab2f91d595184c11b33560da957980a40a8ac613cdbdef47"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddress(bytes,uint256)",
          "deploy(bytes,uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ERC20TokenDeployerWithCreate2.sol:IERC20": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/MarsNextProtocol.sol:MarsNextProtocol": {
        "src": "contracts/MarsNextProtocol.sol:7",
        "version": {
          "withMetadata": "7e6b32216d1118600192ca59ea04d3b6a51ba4800e5cd699cffd2c5e1b074686",
          "withoutMetadata": "0ec87551cee96d334d98c6857bab92288020aafe6ed277541ff7c70b9a6a16e9",
          "linkedWithoutMetadata": "0ec87551cee96d334d98c6857bab92288020aafe6ed277541ff7c70b9a6a16e9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MarsNextProtocol",
            "src": "contracts/MarsNextProtocol.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "4417e775f5400e871b02e512feb6fef996bcc2a35810989fbe37e918a3422d3a",
          "withoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739",
          "linkedWithoutMetadata": "921be4eb42c83d8cd20609a6b5821e3dca10302054973c72848ff2044fa30739"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/MarsNextProtocol.sol:MarsNextProtocol": {
        "src": "contracts/MarsNextProtocol.sol:7",
        "version": {
          "withMetadata": "ce240f754579653a2a3dbbf0dd9f029791db44ad9b3aa911af7a32860ada56ce",
          "withoutMetadata": "0612575bd90d76c703f53164806b56da4fe38df9ed3ad06b825c47e1380e71b8",
          "linkedWithoutMetadata": "0612575bd90d76c703f53164806b56da4fe38df9ed3ad06b825c47e1380e71b8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MarsNextProtocol",
            "src": "contracts/MarsNextProtocol.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/ERC20TokenDeployerWithCreate2.sol:ERC20TokenDeployerWithCreate2": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:12",
        "version": {
          "withMetadata": "1d7a8b6762ed7c13a3fc7281a920b61671e1bd9fa56d889d2bb17e30488a73eb",
          "withoutMetadata": "14fecb355e6a82ada7942f47dbfd04de852ca17405706ed7520b7ba5d99ceadb",
          "linkedWithoutMetadata": "14fecb355e6a82ada7942f47dbfd04de852ca17405706ed7520b7ba5d99ceadb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddress(bytes,uint256)",
          "deploy(bytes,uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ERC20TokenDeployerWithCreate2.sol:IERC20": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/ERC20TokenDeployerWithCreate2.sol:ERC20TokenDeployerWithCreate2": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:12",
        "version": {
          "withMetadata": "1d7a8b6762ed7c13a3fc7281a920b61671e1bd9fa56d889d2bb17e30488a73eb",
          "withoutMetadata": "14fecb355e6a82ada7942f47dbfd04de852ca17405706ed7520b7ba5d99ceadb",
          "linkedWithoutMetadata": "14fecb355e6a82ada7942f47dbfd04de852ca17405706ed7520b7ba5d99ceadb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddress(bytes,uint256)",
          "deploy(bytes,uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ERC20TokenDeployerWithCreate2.sol:IERC20": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/ERC20TokenDeployerWithCreate2.sol:ERC20TokenDeployerWithCreate2": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:12",
        "version": {
          "withMetadata": "1d7a8b6762ed7c13a3fc7281a920b61671e1bd9fa56d889d2bb17e30488a73eb",
          "withoutMetadata": "14fecb355e6a82ada7942f47dbfd04de852ca17405706ed7520b7ba5d99ceadb",
          "linkedWithoutMetadata": "14fecb355e6a82ada7942f47dbfd04de852ca17405706ed7520b7ba5d99ceadb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddress(bytes,uint256)",
          "deploy(bytes,uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ERC20TokenDeployerWithCreate2.sol:IERC20": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "031e7a0214763cf5ce8e99310de435e4242cb74fceef77bee84f69531f00a675",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e2f4c805c99db11527eddcc2401e247f39e6edb2eaa364c04c8daed095acae75",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "87cc2ef26e59ccceacaf39d84ed094aa8fec5bc3b96921dcc6e41cb0cd5f7b42",
          "withoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc",
          "linkedWithoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/CoreMembersV1Upgradeable.sol:CoreMembersV1Upgradeable": {
        "src": "contracts/CoreMembersV1Upgradeable.sol:18",
        "version": {
          "withMetadata": "9bcdbd93920c484d2a806835cc3166297631a9930b2aa5c2731420b20c092da3",
          "withoutMetadata": "ebe9a1f3887b298dd64394585aa3437caa7e222f62f74c78a2bfebd1b084ab4f",
          "linkedWithoutMetadata": "ebe9a1f3887b298dd64394585aa3437caa7e222f62f74c78a2bfebd1b084ab4f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "pause()",
          "unpause()",
          "getCoreMembersList()",
          "isUserInCoreMembersList(address)",
          "getAdminList()",
          "addAdmin(address)",
          "removeAdmin(address)",
          "setAdminShareRate(uint8)",
          "addCoreMember(address)",
          "removeCoreMember(address)",
          "distributeETH()",
          "distributeToken(address)",
          "transferToken(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_coreMembersList",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CoreMembersV1Upgradeable",
              "src": "contracts/CoreMembersV1Upgradeable.sol:24"
            },
            {
              "label": "_adminsList",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CoreMembersV1Upgradeable",
              "src": "contracts/CoreMembersV1Upgradeable.sol:25"
            },
            {
              "label": "_adminShare",
              "offset": 0,
              "slot": "253",
              "type": "t_uint8",
              "contract": "CoreMembersV1Upgradeable",
              "src": "contracts/CoreMembersV1Upgradeable.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/CoreMembersV1Upgradeable.sol:IERC20_EXTENDED": {
        "src": "contracts/CoreMembersV1Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ERC20TokenDeployerWithCreate2.sol:ERC20TokenDeployerWithCreate2": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:12",
        "version": {
          "withMetadata": "1d7a8b6762ed7c13a3fc7281a920b61671e1bd9fa56d889d2bb17e30488a73eb",
          "withoutMetadata": "14fecb355e6a82ada7942f47dbfd04de852ca17405706ed7520b7ba5d99ceadb",
          "linkedWithoutMetadata": "14fecb355e6a82ada7942f47dbfd04de852ca17405706ed7520b7ba5d99ceadb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAddress(bytes,uint256)",
          "deploy(bytes,uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ERC20TokenDeployerWithCreate2.sol:IERC20": {
        "src": "contracts/ERC20TokenDeployerWithCreate2.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "renounceOwnership()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/MarsNextProtocol.sol:MarsNextProtocol": {
        "src": "contracts/MarsNextProtocol.sol:7",
        "version": {
          "withMetadata": "cbef43e0868306ab8677479cdc22a62f9c3db9c9dc6ca698144aba0d09cd407c",
          "withoutMetadata": "9c85f483ee7e1e27249829a18dfc1c21e257e3b957990e5e51ab8bc943b8b28e",
          "linkedWithoutMetadata": "9c85f483ee7e1e27249829a18dfc1c21e257e3b957990e5e51ab8bc943b8b28e"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MarsNextProtocol",
            "src": "contracts/MarsNextProtocol.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/MonthlyRewardsUpgradeable.sol:MonthlyRewardsUpgradeable": {
        "src": "contracts/MonthlyRewardsUpgradeable.sol:5",
        "version": {
          "withMetadata": "ac4ee3e3ede8caa6ed9eec459dd517dc985e977efd5334b679d2b1a160d9ffa8",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ReferralGetterFunctions.sol:ReferralGetterFunctions": {
        "src": "contracts/ReferralGetterFunctions.sol:26",
        "version": {
          "withMetadata": "1f3a03914fbebc5a023ea6628870a90829a6e054dd36be3d25f6a7bacec973e5",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_variablesContract",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ReferralGetterFunctions",
              "src": "contracts/ReferralGetterFunctions.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ReferralV1Upgradeable.sol:IChainlinkOracle": {
        "src": "contracts/ReferralV1Upgradeable.sol:104",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ReferralV1Upgradeable.sol:IERC20_EXTENDED": {
        "src": "contracts/ReferralV1Upgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ReferralV1Upgradeable.sol:IStaking": {
        "src": "contracts/ReferralV1Upgradeable.sol:100",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ReferralV1Upgradeable.sol:IUniswapRouter": {
        "src": "contracts/ReferralV1Upgradeable.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ReferralV1Upgradeable.sol:IVariables": {
        "src": "contracts/ReferralV1Upgradeable.sol:70",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCoreMembersContractAddress()",
          "getLevelRates()",
          "getValueBufferRate()",
          "getCoreMemberRewardRate()",
          "getPlanById(uint8)",
          "getAdminAddress()",
          "getSupportedTokenInfo(address)",
          "isIBP(address)",
          "getRewardTokenContract()",
          "getStakingContract()",
          "getUniSwapRouterV2Address()",
          "getMaticUSDPriceOracle()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ReferralV1Upgradeable.sol:ReferralV1Upgradeable": {
        "src": "contracts/ReferralV1Upgradeable.sol:110",
        "version": {
          "withMetadata": "fecb05cde25b0f0657c524b1071737bed1da8bfa6aad97a93046f1ab7ffbc55d",
          "withoutMetadata": "a6669d8f3563c58b3b423e5e9bffbff2c5d473ecb4936ebe5c63cf72ce5decba",
          "linkedWithoutMetadata": "a6669d8f3563c58b3b423e5e9bffbff2c5d473ecb4936ebe5c63cf72ce5decba"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "getRandomGlobalAddress()",
          "registrationWithToken(address,uint8,address)",
          "registrationWithNative(address,uint8)",
          "getRegistrationsStats()",
          "getWeeklyRewardToBeDistributed()",
          "distributeWeeklyReward(address)",
          "getUserAccount(address)",
          "getUserTeam(address)",
          "getUserBusiness(address)",
          "getUserRewards(address)",
          "isUserInGlobalList(address)",
          "getUserLimit(address)",
          "getUserIbpAddress(address)",
          "addIbpToAddressAdmin(address,address,uint256)",
          "getVariablesContract()",
          "pushAddressToGlobal(address)",
          "getGlobalAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_variableContractAddress",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:116"
            },
            {
              "label": "_globalAddresses",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:117"
            },
            {
              "label": "_totalUsers",
              "offset": 0,
              "slot": "253",
              "type": "t_uint32",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:119"
            },
            {
              "label": "_totalRegistrationValue",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:121"
            },
            {
              "label": "_WeeklyRewardValue",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:122"
            },
            {
              "label": "_weeklyRewardClaimedTimeStamp",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:123"
            },
            {
              "label": "_totalReferralPaid",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:125"
            },
            {
              "label": "_totalGlobalRewardsPaid",
              "offset": 0,
              "slot": "258",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:126"
            },
            {
              "label": "_totalWeeklyRewardsPaid",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:127"
            },
            {
              "label": "_totalCoreMembershipRewardPaid",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:128"
            },
            {
              "label": "_totalIBPRewardsPaid",
              "offset": 0,
              "slot": "261",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:129"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "262",
              "type": "t_mapping(t_address,t_struct(AccountStruct)3239_storage)",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:131"
            },
            {
              "label": "idToAddress",
              "offset": 0,
              "slot": "263",
              "type": "t_mapping(t_uint32,t_address)",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:132"
            },
            {
              "label": "_registerRandom",
              "offset": 0,
              "slot": "264",
              "type": "t_bool",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:172"
            },
            {
              "label": "_WeeklyRewardValueNative",
              "offset": 0,
              "slot": "265",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable",
              "src": "contracts/ReferralV1Upgradeable.sol:174"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(AccountStruct)3239_storage)": {
              "label": "mapping(address => struct AccountStruct)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_address)": {
              "label": "mapping(uint32 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(AccountStruct)3239_storage": {
              "label": "struct AccountStruct",
              "members": [
                {
                  "label": "userId",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "selfAddress",
                  "type": "t_address",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "ibpAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referrerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "refereeAddresses",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "teamAddress",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "teamLevels",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "selfBusiness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "directBusiness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "teamBusiness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "maxLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "currentLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "referralRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "globalRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "weeklyRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "ibpRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "isGlobal",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "globalIndexes",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "16"
                }
              ],
              "numberOfBytes": "544"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/RegisterV1UpgradeableToken.sol:IERC20_EXTENDED": {
        "src": "contracts/RegisterV1UpgradeableToken.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/RegisterV1UpgradeableToken.sol:IVariables": {
        "src": "contracts/RegisterV1UpgradeableToken.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCoreMembersContractAddress()",
          "getLevelRates()",
          "getLevelDecimals()",
          "getValueBufferRate()",
          "getGlobalRewardRate()",
          "getWeeklyRewardRate()",
          "getIbpRewardRate()",
          "getCoreMemberRewardRate()",
          "getIsPayReferralRewards()",
          "getIsPayGlobalRewards()",
          "getIsPayWeeklyRewards()",
          "getIsPayIbpRewards()",
          "getIsPayCoreMembersRewards()",
          "getAdminFees()",
          "getPlanById(uint8)",
          "getAdminAddress()",
          "isTokenSupported(address)",
          "getSupportedTokenInfo(address)",
          "isIBP(address)",
          "getRewardTokenContract()",
          "getRewardTokenRate()",
          "getPresaleContract()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/RegisterV1UpgradeableToken.sol:ReferralV1Upgradeable1": {
        "src": "contracts/RegisterV1UpgradeableToken.sol:109",
        "version": {
          "withMetadata": "2cf5917514dfe448b544db1215f74e01c2684e26fbdb696fc72a95d88956213a",
          "withoutMetadata": "b8163cb595ce687044e6631e51b5f98b633ceafe6f86e0c96232385b931186a5",
          "linkedWithoutMetadata": "b8163cb595ce687044e6631e51b5f98b633ceafe6f86e0c96232385b931186a5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "registrationWithToken(address,uint8,address)",
          "registrationWithTokenAdmin(address,address,uint8,address)",
          "getRegistrationsStats()",
          "getWeeklyRewardToBeDistributed()",
          "getWeeklyRewardsRemainTime()",
          "distributeWeeklyReward(address)",
          "getUserAccount(address)",
          "getUserTeam(address)",
          "getUserBusiness(address)",
          "getUserRewards(address)",
          "isUserInGlobalList(address)",
          "getUserLimit(address)",
          "getUserIbpAddress(address)",
          "addIbpToAddressAdmin(address,address,uint256)",
          "removeIbpFromAddressAdmin(address)",
          "changeReferrer(address,address)",
          "getVariablesContract()",
          "setVariablesContract(address)",
          "pushAddressToGlobal(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_variableContractAddress",
              "offset": 0,
              "slot": "251",
              "type": "t_address",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:115"
            },
            {
              "label": "_globalAddresses",
              "offset": 0,
              "slot": "252",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:116"
            },
            {
              "label": "_totalUsers",
              "offset": 0,
              "slot": "253",
              "type": "t_uint32",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:118"
            },
            {
              "label": "_totalRegistrationValue",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:120"
            },
            {
              "label": "_WeeklyRewardValue",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:121"
            },
            {
              "label": "_weeklyRewardClaimedTimeStamp",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:122"
            },
            {
              "label": "_totalReferralPaid",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:124"
            },
            {
              "label": "_totalGlobalRewardsPaid",
              "offset": 0,
              "slot": "258",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:125"
            },
            {
              "label": "_totalWeeklyRewardsPaid",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:126"
            },
            {
              "label": "_totalCoreMembershipRewardPaid",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:127"
            },
            {
              "label": "_totalIBPRewardsPaid",
              "offset": 0,
              "slot": "261",
              "type": "t_uint256",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:128"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "262",
              "type": "t_mapping(t_address,t_struct(AccountStruct)5693_storage)",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:130"
            },
            {
              "label": "idToAddress",
              "offset": 0,
              "slot": "263",
              "type": "t_mapping(t_uint32,t_address)",
              "contract": "ReferralV1Upgradeable1",
              "src": "contracts/RegisterV1UpgradeableToken.sol:131"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(AccountStruct)5693_storage)": {
              "label": "mapping(address => struct AccountStruct)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_address)": {
              "label": "mapping(uint32 => address)",
              "numberOfBytes": "32"
            },
            "t_struct(AccountStruct)5693_storage": {
              "label": "struct AccountStruct",
              "members": [
                {
                  "label": "userId",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "selfAddress",
                  "type": "t_address",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "ibpAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "referrerAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "refereeAddresses",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "teamAddress",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "teamLevels",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "selfBusiness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "directBusiness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "teamBusiness",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "maxLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "currentLimit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "referralRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "globalRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "weeklyRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "ibpRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "isGlobal",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "globalIndexes",
                  "type": "t_array(t_uint32)dyn_storage",
                  "offset": 0,
                  "slot": "16"
                }
              ],
              "numberOfBytes": "544"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ShareBalanceV1Upgradeable.sol:IERC20_EXTENDED": {
        "src": "contracts/ShareBalanceV1Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ShareBalanceV1Upgradeable.sol:ShareBalanceUpgradeable": {
        "src": "contracts/ShareBalanceV1Upgradeable.sol:18",
        "version": {
          "withMetadata": "62e8b60169465c7203182781b393ca63adf22dedcfa83a22368bc1c65ce4cb79",
          "withoutMetadata": "9da8d6ed5b55b8d8b4bbd452adc993bf517da6cebc9fc2d1f35e6775126599a6",
          "linkedWithoutMetadata": "9da8d6ed5b55b8d8b4bbd452adc993bf517da6cebc9fc2d1f35e6775126599a6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "pause()",
          "unpause()",
          "getusersList()",
          "isUserInList(address)",
          "addUser(address)",
          "removeUser(address)",
          "distributeETH()",
          "distributeToken(address)",
          "getAdminAddress()",
          "setAdminAddress(address)",
          "getAdminShare()",
          "setAdminShare(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_usersList",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ShareBalanceUpgradeable",
              "src": "contracts/ShareBalanceV1Upgradeable.sol:24"
            },
            {
              "label": "_adminAddress",
              "offset": 0,
              "slot": "252",
              "type": "t_address",
              "contract": "ShareBalanceUpgradeable",
              "src": "contracts/ShareBalanceV1Upgradeable.sol:25"
            },
            {
              "label": "_adminSharePer",
              "offset": 20,
              "slot": "252",
              "type": "t_uint8",
              "contract": "ShareBalanceUpgradeable",
              "src": "contracts/ShareBalanceV1Upgradeable.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/StakingUpgradeable.sol:IERC20_EXTENDED": {
        "src": "contracts/StakingUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/StakingUpgradeable.sol:IVariables": {
        "src": "contracts/StakingUpgradeable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getCoreMembersContractAddress()",
          "getLevelRates()",
          "getLevelDecimals()",
          "getValueBufferRate()",
          "getGlobalRewardRate()",
          "getWeeklyRewardRate()",
          "getIbpRewardRate()",
          "getCoreMemberRewardRate()",
          "getIsPayReferralRewards()",
          "getIsPayGlobalRewards()",
          "getIsPayWeeklyRewards()",
          "getIsPayIbpRewards()",
          "getIsPayCoreMembersRewards()",
          "getAdminFees()",
          "getAdminAddress()",
          "isTokenSupported(address)",
          "isIBP(address)",
          "getRewardTokenContract()",
          "getRewardTokenRate()",
          "getPresaleContract()",
          "getReferralContract()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/StakingUpgradeable.sol:StakingUpgradeable": {
        "src": "contracts/StakingUpgradeable.sol:63",
        "version": {
          "withMetadata": "276ddf92a2a4bcd80aed9729323096ca6fe5bcc424ff6800e2d03af306a00e83",
          "withoutMetadata": "35aba593790e74ef6ace4211626d3652d1ff0a5c524d352132086ade7b8a543a",
          "linkedWithoutMetadata": "35aba593790e74ef6ace4211626d3652d1ff0a5c524d352132086ade7b8a543a"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "stakeInfoMap(uint256)",
          "userAccountMap(address)",
          "stake(address,uint256)",
          "getStakingReward(uint256)",
          "getUserAllStakingsRewards(address)",
          "claimStakingReward(uint256)",
          "unStake(uint32)",
          "isStaked(address)",
          "getUserTotalValueStaked(address)",
          "getUserStakingIDs(address)",
          "getUserTotalRewardClaimedToken(address)",
          "getStakingTimeRemaining(uint256)",
          "getActiveStakingIDs()",
          "activeStakersList()",
          "allStakersList()",
          "getTotalValueStaked()",
          "getTotalStakingRewardDistributed()",
          "getStakingCappings()",
          "setStakingRewardRate(uint256)",
          "setStakingDuration(uint256)",
          "getVariablesContract()",
          "setVariablesContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_variablesContract",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "StakingUpgradeable",
              "src": "contracts/StakingUpgradeable.sol:68"
            },
            {
              "label": "_stakers",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_address)dyn_storage",
              "contract": "StakingUpgradeable",
              "src": "contracts/StakingUpgradeable.sol:69"
            },
            {
              "label": "_totalValueStaked",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "StakingUpgradeable",
              "src": "contracts/StakingUpgradeable.sol:70"
            },
            {
              "label": "_totalValueUnStaked",
              "offset": 0,
              "slot": "204",
              "type": "t_uint256",
              "contract": "StakingUpgradeable",
              "src": "contracts/StakingUpgradeable.sol:71"
            },
            {
              "label": "_rewardsDistributed",
              "offset": 0,
              "slot": "205",
              "type": "t_uint256",
              "contract": "StakingUpgradeable",
              "src": "contracts/StakingUpgradeable.sol:72"
            },
            {
              "label": "_stakingRewardRate",
              "offset": 0,
              "slot": "206",
              "type": "t_uint256",
              "contract": "StakingUpgradeable",
              "src": "contracts/StakingUpgradeable.sol:74"
            },
            {
              "label": "_stakingDuration",
              "offset": 0,
              "slot": "207",
              "type": "t_uint256",
              "contract": "StakingUpgradeable",
              "src": "contracts/StakingUpgradeable.sol:75"
            },
            {
              "label": "account",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_address,t_struct(Account)8297_storage)",
              "contract": "StakingUpgradeable",
              "src": "contracts/StakingUpgradeable.sol:91"
            },
            {
              "label": "stakeInfo",
              "offset": 0,
              "slot": "209",
              "type": "t_mapping(t_uint256,t_struct(StakeInfo)8312_storage)",
              "contract": "StakingUpgradeable",
              "src": "contracts/StakingUpgradeable.sol:92"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(Account)8297_storage)": {
              "label": "mapping(address => struct StakingUpgradeable.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakeInfo)8312_storage)": {
              "label": "mapping(uint256 => struct StakingUpgradeable.StakeInfo)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)8297_storage": {
              "label": "struct StakingUpgradeable.Account",
              "members": [
                {
                  "label": "stakingID",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(StakeInfo)8312_storage": {
              "label": "struct StakingUpgradeable.StakeInfo",
              "members": [
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "rewardRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "rewardClaimed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/VariablesV1Upgradeable.sol:IERC20_EXTENDED": {
        "src": "contracts/VariablesV1Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/VariablesV1Upgradeable.sol:VariablesV1Upgradeable": {
        "src": "contracts/VariablesV1Upgradeable.sol:18",
        "version": {
          "withMetadata": "da836da05605929428aaef22d84b748e46b8bd6db79ac4ec6e8d264ae193dd28",
          "withoutMetadata": "4079db7fc77beac946b300f241f40a49ba17d5f451ec428522dd761c652e6e9e",
          "linkedWithoutMetadata": "4079db7fc77beac946b300f241f40a49ba17d5f451ec428522dd761c652e6e9e"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "pushSupportedTokenToList(address,bool,address)",
          "getCoreMembersContractAddress()",
          "setCoreMembersContractAddress(address)",
          "getSupportedTokenInfo(address)",
          "isTokenSupported(address)",
          "disableSupportedToken(address[])",
          "getLevelRates()",
          "setLevelRates(uint16[])",
          "getLevelDecimals()",
          "setLevelDecimals(uint16)",
          "getBaseCurrencyDecimals()",
          "setBaseCurrencyDecimals(uint8)",
          "getPlanById(uint8)",
          "getPlansCount()",
          "setPlans(uint8[],string[],uint256[],uint256[])",
          "getValueBufferRate()",
          "setValueBufferRate(uint8)",
          "getGlobalRewardRate()",
          "setGlobalRewardRate(uint8)",
          "getWeeklyRewardRate()",
          "setWeeklyRewardRate(uint8)",
          "getIbpRewardRate()",
          "setIbpRewardRate(uint8)",
          "getCoreMemberRewardRate()",
          "setCoreMemberRewardRate(uint8)",
          "getAdminFees()",
          "setAdminFees(uint8)",
          "getIsPayRewardToken()",
          "setIsPayRewardToken(bool)",
          "getIsPayReferralRewards()",
          "getIsPayGlobalRewards()",
          "getIsPayWeeklyRewards()",
          "getIsPayIbpRewards()",
          "setIsPayReferralRewards(bool)",
          "setIsPayGlobalRewards(bool)",
          "setIsPayWeeklyRewards(bool)",
          "setIsPayIbpRewards(bool)",
          "getIsPayCoreMembersRewards()",
          "setIsPayCoreMembersRewards(bool)",
          "getRewardTokenContract()",
          "setRewardTokenContract(address)",
          "getRewardTokenRate()",
          "setRewardTokenRate(uint8)",
          "isAdmin(address)",
          "getAdminAddress()",
          "setAdminAddress(address)",
          "isIBP(address)",
          "getIBPList()",
          "addIBPAddressAdmin(address)",
          "removeIBPAddressAdmin(address)",
          "getPresaleContract()",
          "setPresaleContract(address)",
          "getReferralContract()",
          "setReferralContract(address)",
          "getStakingContract()",
          "setStakingContract(address)",
          "getUniSwapRouterV2Address()",
          "setUniSwapRouterV2Address(address)",
          "getMaticUSDPriceOracle()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_levelRates",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint16)dyn_storage",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:24"
            },
            {
              "label": "_levelDecimals",
              "offset": 0,
              "slot": "252",
              "type": "t_uint16",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:25"
            },
            {
              "label": "_baseCurrencyDecimals",
              "offset": 2,
              "slot": "252",
              "type": "t_uint8",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:26"
            },
            {
              "label": "_valueBufferRate",
              "offset": 3,
              "slot": "252",
              "type": "t_uint8",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:28"
            },
            {
              "label": "_globalRewardRate",
              "offset": 4,
              "slot": "252",
              "type": "t_uint8",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:29"
            },
            {
              "label": "_weeklyRewardRate",
              "offset": 5,
              "slot": "252",
              "type": "t_uint8",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:30"
            },
            {
              "label": "_ibpRewardRate",
              "offset": 6,
              "slot": "252",
              "type": "t_uint8",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:31"
            },
            {
              "label": "_coreMemberRewardRate",
              "offset": 7,
              "slot": "252",
              "type": "t_uint8",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:32"
            },
            {
              "label": "_adminFees",
              "offset": 8,
              "slot": "252",
              "type": "t_uint8",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:33"
            },
            {
              "label": "_rewardTokenRate",
              "offset": 9,
              "slot": "252",
              "type": "t_uint8",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:34"
            },
            {
              "label": "_isPayRewardToken",
              "offset": 10,
              "slot": "252",
              "type": "t_bool",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:36"
            },
            {
              "label": "_isPayReferralRewards",
              "offset": 11,
              "slot": "252",
              "type": "t_bool",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:37"
            },
            {
              "label": "_isPayGlobalRewards",
              "offset": 12,
              "slot": "252",
              "type": "t_bool",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:38"
            },
            {
              "label": "_isPayWeeklyRewards",
              "offset": 13,
              "slot": "252",
              "type": "t_bool",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:39"
            },
            {
              "label": "_isPayIbpRewards",
              "offset": 14,
              "slot": "252",
              "type": "t_bool",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:40"
            },
            {
              "label": "_isPayCoreMembersRewards",
              "offset": 15,
              "slot": "252",
              "type": "t_bool",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:41"
            },
            {
              "label": "supportedTokensList",
              "offset": 0,
              "slot": "253",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:43"
            },
            {
              "label": "_ibpAddresses",
              "offset": 0,
              "slot": "254",
              "type": "t_array(t_address)dyn_storage",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:44"
            },
            {
              "label": "_presaleContract",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:46"
            },
            {
              "label": "_referralContract",
              "offset": 0,
              "slot": "256",
              "type": "t_address",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:47"
            },
            {
              "label": "_stakingContract",
              "offset": 0,
              "slot": "257",
              "type": "t_address",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:48"
            },
            {
              "label": "_ibpContract",
              "offset": 0,
              "slot": "258",
              "type": "t_address",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:49"
            },
            {
              "label": "_rewardTokenContract",
              "offset": 0,
              "slot": "259",
              "type": "t_address",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:50"
            },
            {
              "label": "_coreMembersContract",
              "offset": 0,
              "slot": "260",
              "type": "t_address",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:51"
            },
            {
              "label": "_adminAddress",
              "offset": 0,
              "slot": "261",
              "type": "t_address",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:52"
            },
            {
              "label": "plans",
              "offset": 0,
              "slot": "262",
              "type": "t_mapping(t_uint8,t_struct(PlanStruct)9488_storage)",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:71"
            },
            {
              "label": "supportTokens",
              "offset": 0,
              "slot": "263",
              "type": "t_mapping(t_address,t_struct(SupportedTokensStruct)9503_storage)",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:72"
            },
            {
              "label": "isIBPAddress",
              "offset": 0,
              "slot": "264",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:73"
            },
            {
              "label": "_uniswapRouterV2Address",
              "offset": 0,
              "slot": "265",
              "type": "t_address",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:78"
            },
            {
              "label": "_isAdmin",
              "offset": 0,
              "slot": "266",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:80"
            },
            {
              "label": "_maticUsdPriceOracleContract",
              "offset": 0,
              "slot": "267",
              "type": "t_address",
              "contract": "VariablesV1Upgradeable",
              "src": "contracts/VariablesV1Upgradeable.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint16)dyn_storage": {
              "label": "uint16[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(SupportedTokensStruct)9503_storage)": {
              "label": "mapping(address => struct VariablesV1Upgradeable.SupportedTokensStruct)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_struct(PlanStruct)9488_storage)": {
              "label": "mapping(uint8 => struct VariablesV1Upgradeable.PlanStruct)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(PlanStruct)9488_storage": {
              "label": "struct VariablesV1Upgradeable.PlanStruct",
              "members": [
                {
                  "label": "planId",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxLimitMultiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(SupportedTokensStruct)9503_storage": {
              "label": "struct VariablesV1Upgradeable.SupportedTokensStruct",
              "members": [
                {
                  "label": "contractAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isStable",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "3"
                },
                {
                  "label": "aggregatorAddress",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "3"
                },
                {
                  "label": "isEnaled",
                  "type": "t_bool",
                  "offset": 22,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    }
  ]
}